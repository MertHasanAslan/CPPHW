#include <iostream>
#include <string>
#include <iomanip>
using namespace std;
//Input ornekleri
/*
Istanbul
Ankara
448.2
42
1
10
no
*/

/*
Istanbul
Ankara
448.2
42
3
10
no
*/

/*
Istanbul
Ankara
448.2
42
3
30
no
*/

/*
Ankara
Eskisehir
234.7
54
1
10
no
*/

/*
Ankara
Eskisehir
234.7
54
2
35
no
*/

/*
Ankara
Eskisehir
234.7
54
2
35
yes
*/

/*
Antalya
Edirne
943.8
35
5
10
yes
*/


void getTripDetails(string& startCity, string& destinationCity, float& distance, float& gasPrice, int& passengers, int& daysInAdvance, bool& isWeekend)	
{
	string yes_no;
	cout << "Enter the starting city: ";
	cin >> startCity;
	cout << "Enter the destination city: ";
	cin >> destinationCity;
	cout << "Enter the trip distance in kilometers: ";
	cin >> distance;
	cout << "Enter the price of gasoline per liter: ";
	cin >> gasPrice;
	cout << "Enter the number of passengers: ";
	cin >> passengers;
	cout << "Enter days booked in advance: ";
	cin >> daysInAdvance;
	cout << "Is the trip on a weekend? (yes/no): ";
	cin >> yes_no;
	if (yes_no == "yes") {
		isWeekend = true;
	}
	else if (yes_no == "no") {
		isWeekend = false;
	}
}

float calculateEnvironmentalFee(float distance, float average_fuel_consumption_per_100km) {
	float envImpactFee;
	if (average_fuel_consumption_per_100km > 8) {
		envImpactFee = 0.002*distance;
	}
	else {
		envImpactFee = 0.001*distance;
	}
	return envImpactFee;
}

float calculateCarCost(const float distance, const float gasPrice, const float average_fuel_consumption_per_100km, const float envImpactFee)
{
	float fuel_cost, environmental_fee, total_car_cost;
	fuel_cost = (distance / 100.0) * average_fuel_consumption_per_100km * gasPrice;
	if (fuel_cost > 2700)
	{
		fuel_cost = fuel_cost / 2.0;
	}
	environmental_fee = distance * envImpactFee;
	total_car_cost = fuel_cost + environmental_fee;
	return total_car_cost;
}

float calculateTieredDistanceRate(float basePrice, float distance, string type)
{
	if (type == "bus")
	{
		if (distance > 100 && distance <= 200)
		{
			basePrice = basePrice * 1.05;
		}
		else if (distance > 200 && distance <= 300)
		{
			basePrice = basePrice * 1.10;
		}
		else if (distance > 300)
		{
			basePrice = basePrice * 1.15;
		}
	}
	else if (type == "train")
	{
		if (distance > 100 && distance <= 200)
		{
			basePrice = basePrice * 1.10;
		}
		else if (distance > 200 && distance <= 300)
		{
			basePrice = basePrice * 1.15;
		}
		else if (distance > 300)
		{
			basePrice = basePrice * 1.30;
		}
	}
	return basePrice;
}


float applyEarlyBookingDiscount(float cost, int daysInAdvance)
{
	if (daysInAdvance >= 30)
	{
		cost = cost * 0.9;
	}
	return cost;
}

float applyDayOfWeekPricing(float cost, bool isWeekend)
{
	if (isWeekend)
	{
		cost = cost * 1.10;
	}
	return cost;
}

float calculateBusTrainCost(const float basePrice, const float distance, const int passengers, const int daysInAdvance, const bool isWeekend, string type)
{
	float cost = calculateTieredDistanceRate(basePrice, distance, type) * passengers;
	cost = applyEarlyBookingDiscount(cost, daysInAdvance);
	cost = applyDayOfWeekPricing(cost, isWeekend);
	return cost;
}

float findMin(float a, float b, float c, float d)
{
	float x;
	if (a <= b && a <= c && a <= d) {
		x = a;

	}
	else if (b <= a && b <= c && b <= d) {
		x = b;
	}
	else if (c <= a && c <= b && c <= d) {
		x = c;
	}
	else if (d <= a && d <= b && d <= c) {
		x = d;
	}
	return x;
}




int main() {
	string startCity, destinationCity;
	float distance, gasPrice;
	int passengers, daysInAdvance;
	bool isWeekend;
	float cost_car1, cost_car2, cost_bus, cost_train;
	float min_price;
	float car1_average_fuel_consumption_per_100km = 7.9, car2_average_fuel_consumption_per_100km = 8.2;
	float car1_envImpactFee, car2_envImpactFee;
	float bus_base_price = 510, train_base_price = 470;
	getTripDetails(startCity, destinationCity, distance, gasPrice, passengers, daysInAdvance, isWeekend);
	
	car1_envImpactFee = calculateEnvironmentalFee(distance, car1_average_fuel_consumption_per_100km);
	car2_envImpactFee = calculateEnvironmentalFee(distance, car2_average_fuel_consumption_per_100km);
	
	cost_car1 = calculateCarCost(distance, gasPrice, car1_average_fuel_consumption_per_100km, car1_envImpactFee);
	cost_car2 = calculateCarCost(distance, gasPrice, car2_average_fuel_consumption_per_100km, car2_envImpactFee);
	cost_bus = calculateBusTrainCost(bus_base_price, distance, passengers, daysInAdvance, isWeekend, "bus");
	cost_train = calculateBusTrainCost(train_base_price, distance, passengers, daysInAdvance, isWeekend, "train");
	min_price=findMin(cost_car1, cost_car2, cost_bus, cost_train);
	string min;
	if (cost_car1 == min_price) {
		min = "Car 1";
	}
	else if (cost_car2 == min_price) {
		min = "Car 2";
	}
	else if (cost_bus == min_price) {
		min = "Bus";
	}
	else if (cost_train == min_price) {
		min = "Train";
	}
	cout << fixed << setprecision(2);
	cout << "Cost for Car 1: " << cost_car1 << " TL" << endl;
	cout << "Cost for Car 2: " << cost_car2 << " TL" << endl;
	cout << "Cost for Bus: " << cost_bus << " TL" << endl;
	cout << "Cost for Train: " << cost_train << " TL" << endl;
	cout << "The most cost-effective transportation option to travel from " << startCity << " to " << destinationCity << ": "<<min<<" with a cost of " << min_price << " TL";

	return 0;
}
